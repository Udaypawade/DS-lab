#include <iostream>
using namespace std;

#define SIZE 100

class Stack {
    char arr[SIZE];
    int top;
public:
    Stack() { top = -1; }

    void push(char ch) {
        if (top == SIZE - 1)
            cout << "Stack Overflow\n";
        else
            arr[++top] = ch;
    }

    char pop() {
        if (top == -1)
            return '\0';
        else
            return arr[top--];
    }

    char peek() {
        if (top == -1)
            return '\0';
        else
            return arr[top];
    }

    bool isEmpty() {
        return top == -1;
    }
};

// Function to return precedence of operators
int precedence(char ch) {
    switch (ch) {
        case '^': return 3;
        case '*':
        case '/': return 2;
        case '+':
        case '-': return 1;
        default: return 0;
    }
}

// Function to check if character is operator
bool isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^');
}

// Function to convert infix to postfix
void infixToPostfix(char exp[]) {
    Stack s;
    char postfix[SIZE];
    int j = 0;

    for (int i = 0; exp[i] != '\0'; i++) {
        char ch = exp[i];

        // If operand, add to output
        if ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9')) {
            postfix[j++] = ch;
        }

        // If '(', push to stack
        else if (ch == '(') {
            s.push(ch);
        }

        // If ')', pop until '(' is found
        else if (ch == ')') {
            while (!s.isEmpty() && s.peek() != '(') {
                postfix[j++] = s.pop();
            }
            s.pop(); // remove '('
        }

        // If operator
        else if (isOperator(ch)) {
            while (!s.isEmpty() && precedence(s.peek()) >= precedence(ch)) {
                if (ch == '^' && s.peek() == '^')
                    break; // Right associative
                postfix[j++] = s.pop();
            }
            s.push(ch);
        }
    }

    // Pop all remaining operators
    while (!s.isEmpty()) {
        postfix[j++] = s.pop();
    }

    postfix[j] = '\0';
    cout << "\nPostfix Expression: " << postfix << endl;
}

// Main function
int main() {
    char exp[SIZE];
    cout << "Enter Infix Expression: ";
    cin >> exp;

    infixToPostfix(exp);

    return 0;
}
